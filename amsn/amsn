#!/usr/bin/wish
###
###
################################################################
###                                              ###############
###        Alvaro's Messenger - amsn             ###############
###                                              ###############
###       http://amsn.sourceforge.net            ###############
###     amsn-usesr@lists.sourceforge.net         ###############
###                                              ###############
################################################################
### airadier at users.sourceforge.net (airadier) ###############
### http://aim.homelinux.com                     ###############
################################################################
### grimaldo@panama.iaehv.nl (LordOfScripts)     ###############
### http://www.coralys.com/linux/                ###############
################################################################
### Original ccmsn                               ###############
### http://msn.CompuCreations.com/               ###############
### Dave Mifsud <dave at CompuCreations dot com> ###############
################################################################
###
###
### This program is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation; version 2 of the License
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program; if not, write to the Free Software
### Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
###
###

set version "0.80a"
set date "12/11/2002"
set weburl "http://amsn.sourceforge.net"


#=======================================================================


#Look if we are launched from a link and set the correct working dir
if {[catch {file readlink [info script]} res]!=0} {
   set program_dir [file dirname [info script]]
} else {
   set resdir [file dirname $res]
   while {[catch {file readlink $res} res2]==0} {
      set res $res2
      if { [string range $res2 0 0]=="/" } {
         set resdir [file dirname $res2]
      } else {
         set resdir [file join $resdir [file dirname $res2]]
      }
   }
   set program_dir $resdir
}

# Setup other important directory paths
if {$tcl_platform(platform) == "unix"} {
   set HOME "[file join $env(HOME) .amsn]"
   set files_dir "[file join $env(HOME) amsn_received]"
} elseif {$tcl_platform(platform) == "windows"} {
  if {[info exists env(USERPROFILE)]} {
     set HOME "[file join $env(USERPROFILE) amsn]"
     set files_dir "[file join $env(USERPROFILE) amsn_received]"
  } else {
   set HOME "[file join ${program_dir} amsn_config]"
   set files_dir "[file join ${program_dir} amsn_received]"
  }
} else {
   set HOME "[file join ${program_dir} amsn_config]"
   set files_dir "[file join ${program_dir} amsn_received]"
}

set log_dir "[file join ${HOME} logs]"

# And setup where to find optional packages
lappend auto_path "[file join $program_dir plugins]"
lappend auto_path "[file join ${HOME} plugins]"

#///////////////////////////////////////////////////////////////////////
set images_folder "[file join $program_dir i]"
set sounds_folder "[file join $program_dir s]"
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
#Notebook Pages (Buddies,News,Calendar,etc.)
set pgBuddy ""
set pgNews  ""
#///////////////////////////////////////////////////////////////////////
 


#///////////////////////////////////////////////////////////////////////
# Load program modules
source [file join $program_dir ctthemes.tcl]
source [file join $program_dir notebook.tcl]	;# Notebook Megawidget
source [file join $program_dir notebook1.tcl]	;# Notebook Megawidget
source [file join $program_dir progressbar.tcl]	;# Progressbar Megawidget
source [file join $program_dir dkffont.tcl]	;# Font selection megawidget
source [file join $program_dir migmd5.tcl]
source [file join $program_dir config.tcl]
source [file join $program_dir proxy.tcl]
source [file join $program_dir protocol.tcl]
source [file join $program_dir ctadverts.tcl]
source [file join $program_dir lang.tcl]
source [file join $program_dir ctdegt.tcl]
source [file join $program_dir hotmail.tcl]
source [file join $program_dir checkver.tcl]
source [file join $program_dir smileys.tcl]
source [file join $program_dir groups.tcl]	;# Handle buddy groups
source [file join $program_dir abook.tcl]		;# Handle buddy address book
source [file join $program_dir gui.tcl]
source [file join $program_dir alarm.tcl]		;# Alarms code (Burger)
source [file join $program_dir dock.tcl]		;# Docking routines
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
#TODO: Quit unread from here, put it in hotmail (if correct). Same for other variables
set unread 0
set urlcount 0
set urlstarts { "http://" "https://" "ftp://" "www." }
#end AIM
#///////////////////////////////////////////////////////////////////////



set status_show 0
set list_states {
	{NLN online #0000AA online online bonline}
	{IDL noactivity #0000A0 online away baway}
	{BRB rightback #0000C0 online away baway}
	{PHN onphone #0000C0 online busy bbusy}
	{BSY busy #C00000 online busy bbusy}
	{AWY away #00A000 online away baway}
	{LUN gonelunch #00A000 online away baway}
	{HDN appearoff #404040 offline offline boffline}
	{FLN offline #404040 offline offline boffline}
	}



#///////////////////////////////////////////////////////////////////////
#TODO: Make an amsn::messageBox procedure and move in there
proc msg_box {msg} {
   tk_messageBox -type ok -icon info -message $msg -title "[trans title]"
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc launch_browser { url } {
	global config
	eval exec $config(browser) $url &
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc create_dir {path} {
   global tcl_platform

   if {[file isdirectory $path] == 0} {
      file mkdir $path
      if {$tcl_platform(platform) == "unix"} {
         file attributes $path -permissions 00700
      }
   }
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
# TODO: Move this procedures into the GUI section
proc cmsn_draw_about {} {
   global program_dir
   toplevel .about
   wm title .about "[trans about] [trans title]"
   wm transient .about .

   set developers "\nDidimo Grimaldo\nAlvaro J. Iradier\nKhalaf Philippe\nDave Mifsud"
   frame .about.top -class Amsn
       label .about.top.i -image msndroid
       label .about.top.l -font splainf -text "[trans broughtby]:$developers"
       pack .about.top.i .about.top.l -side left
   pack .about.top

   text .about.info -background white -width 60 -height 30 -wrap word \
      -yscrollcommand ".about.ys set" -font   examplef
   scrollbar .about.ys -command ".about.info yview"
   pack .about.ys -side right -fill y
   pack .about.info -expand true -fill both
   set id [open "[file join $program_dir README]" r]
   .about.info insert 1.0 [read $id]
   close $id
   .about.info configure -state disabled
   update idletasks
   set x [expr {([winfo vrootwidth .about] - [winfo width .about]) / 2}]
   set y [expr {([winfo vrootheight .about] - [winfo height .about]) / 2}]
   wm geometry .about +${x}+${y}

   frame .about.bottom -class Amsn
       button .about.bottom.close -text "[trans close]" -font splainf -command "destroy .about"
       pack .about.bottom.close
   pack .about.bottom -expand 1
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
# TODO: Check if there's a window called ".show" already opened, and
# close it or we will get an error
proc amsn_showhelpfile {file title} {
   global program_dir
   toplevel .show
   wm title .show "$title"
   wm transient .show .

   text .show.info -background white -width 60 -height 30 -wrap word \
      -yscrollcommand ".show.ys set" -font   examplef
   scrollbar .show.ys -command ".show.info yview"
   pack .show.ys -side right -fill y
   pack .show.info -expand true -fill both
   set id [open "[file join $program_dir $file]" r]
   .show.info insert 1.0 [read $id]
   close $id
   .show.info configure -state disabled
   update idletasks
   set x [expr {([winfo vrootwidth .show] - [winfo width .show]) / 2}]
   set y [expr {([winfo vrootheight .show] - [winfo height .show]) / 2}]
   wm geometry .show +${x}+${y}

   frame .show.bottom -class Amsn
       button .show.bottom.close -text "[trans close]" -font splainf -command "destroy .show"
       pack .show.bottom.close
   pack .show.bottom -expand 1
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc draw_faq {} {
   global program_dir
   toplevel .faq
   wm title .faq "[trans faq]"
   wm transient .faq .

   text .faq.info -background white -width 60 -height 30 -wrap word \
      -yscrollcommand ".faq.ys set" -font   examplef
   scrollbar .faq.ys -command ".faq.info yview"
   pack .faq.ys -side right -fill y
   pack .faq.info -expand true -fill both
   set id [open "[file join $program_dir FAQ]" r]
   .faq.info insert 1.0 [read $id]
   close $id
   .faq.info configure -state disabled
   update idletasks
   set x [expr {([winfo vrootwidth .faq] - [winfo width .faq]) / 2}]
   set y [expr {([winfo vrootheight .faq] - [winfo height .faq]) / 2}]
   wm geometry .faq +${x}+${y}

   frame .faq.bottom -class Amsn
       button .faq.bottom.close -text "[trans close]" -font splainf -command "destroy .faq"
       pack .faq.bottom.close
   pack .faq.bottom -expand 1
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc toggle_status {} {
   global status_show

   if {$status_show} {
      wm state .status withdrawn
      set status_show 0
   } else {
      wm state .status normal
      set status_show 1
   }
}
#///////////////////////////////////////////////////////////////////////


proc timestamp {} {
   set stamp [clock format [clock seconds] -format %H:%M:%S]
   return "\[$stamp\]"
}


#///////////////////////////////////////////////////////////////////////
proc status_log {txt {colour ""}} {

   .status.info insert end "[timestamp] $txt" $colour
   .status.info yview moveto 1.0
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
# configureMenuEntry .main_menu.file "[trans addcontact]" disabled|normal
proc configureMenuEntry {m e s} {
    $m entryconfigure $e -state $s
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc close_cleanup {} {
  global HOME config
  set config(wingeometry) [wm geometry .]
  set config(showonline)  [::groups::IsExpanded online]
  set config(showoffline) [::groups::IsExpanded offline]
  save_config
  save_alarms   ;# Save alarm settings
  close_dock    ;# Close down the dock socket
  catch {file delete [file join $HOME hotlog.htm]} res
}
#///////////////////////////////////////////////////////////////////////





#///////////////////////////////////////////////////////////////////////
proc cmsn_open_received {location} {
  global config

  set fileman $config(filemanager)
  if { [string length $fileman] < 1 } {
    msg_box "$location. Check file manager setting in preferences"
  } else {
    lappend fileman $location
    eval exec [lindex $fileman 0] [lrange $fileman 1 end] &
  }
}
#///////////////////////////////////////////////////////////////////////


#///////////////////////////////////////////////////////////////////////
proc anti_idle {} {
  global idletime
  set idletime 0
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
# TODO: Use wm vroot to get mouse x and y global position, check it every
# five seconds and reset idle if the mouse has moved
proc incr_idle {} {
  global idletime config

   if {$idletime >= 300 && [::MSN::myStatusIs] == "NLN" && $config(autoidle) == 1} {
    ::MSN::changeStatus IDL
  } elseif { $idletime <300 && [::MSN::myStatusIs] == "IDL"} {
    ::MSN::changeStatus NLN
  }

  set idletime [expr {$idletime + 5}]
  after 5000 incr_idle
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc choose_theme { } {
    global config
    setColor . . background {-background -highlightbackground}
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc setColor {w button name options} {
    global config

    grab $w
    set initialColor [$button cget -$name]
    set color [tk_chooseColor -title "[trans choosebackgroundcolor]" -parent $w \
	-initialcolor $initialColor]
    if [string compare $color ""] {
        set config(backgroundcolor) $color
	::themes::ApplyDeep $w $options $color
    }
    grab release $w
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc clickableImage {tw name image command {padx 0} {pady 0}} {
   label $tw.$name -image $image -background white
   $tw.$name configure -cursor hand2 -borderwidth 0
   bind $tw.$name <Button1-ButtonRelease> $command
   $tw window create end -window $tw.$name -padx $padx -pady $pady -align center -stretch true
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc toggleGroup {tw name image id {padx 0} {pady 0}} {
   label $tw.$name -image $image
   $tw.$name configure -cursor hand2 -borderwidth 0
   bind $tw.$name <Button1-ButtonRelease> "::groups::ToggleStatus $id; cmsn_draw_online"
   $tw window create end -window $tw.$name -padx $padx -pady $pady
}
#///////////////////////////////////////////////////////////////////////




#///////////////////////////////////////////////////////////////////////
proc blockun_user { user_login } {
   global list_bl
   if {[lsearch $list_bl "$user_login *"] != -1} {
	unblock_user $user_login
   } else {
   	block_user $user_login
   }
}   
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc block_user {user_login} {

    set answer [tk_messageBox -message "[trans confirm]" -type yesno -icon question -title [trans block] -parent [focus]]
    if {$answer == "yes"} {
      set name [::abook::getName ${user_login}]
      ::MSN::blockUser ${user_login} [urlencode $name]
    }
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc unblock_user {user_login} {
    set name [::abook::getName ${user_login}]
   ::MSN::unblockUser ${user_login} [urlencode $name]
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc delete_user {user_login} {

   global alarms
   set answer [tk_messageBox -message "[trans confirmdelete ${user_login}]" -type yesno -icon question]

   if {$answer == "yes"} {

      ::MSN::deleteUser ${user_login}
      if { [info exists alarms($user_login)] } {
	unset alarms($user_login) alarms(${user_login}_sound) alarms(${user_login}_pic) alarms(${user_login}_sound_st) alarms(${user_login}_pic_st) alarms(${user_login}_loop)
      }
   }
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc send_mail {user_login} {
  global config password

  set mail_param $user_login ;#By default, just the address
  if {[string first "balsa" $config(mailcommand)] != -1} {
      set mail_param "--compose=$user_login"
  } elseif {[string first "mozilla" $config(mailcommand)] != -1} {
      set mail_param "-compose mailto:$user_login"
  } elseif {[string first "evolution" $config(mailcommand)] != -1} {
      set mail_param "mailto:$user_login"
  } elseif {[string first "sylpheed" $config(mailcommand)] != -1} {
      set mail_param "--compose $user_login"
  } elseif {[string length $config(mailcommand)]==0} {
     hotmail_compose $user_login $config(login) $password
     return 0
  }

  eval exec $config(mailcommand) $mail_param &
  return 0
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc menuCmdMove {newgid {paramlist ""}} {
    set passport [lindex $paramlist 0]
    set currgid  [::abook::getGroup $passport -id]
    puts "menuCmdMove $passport from $currgid to $newgid"
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc show_umenu {user_login x y} {
   global list_bl config alarms

   set blocked [lsearch $list_bl "${user_login} *"]
   .user_menu delete 0 end
   .user_menu add command -label "[trans sendmsg]" \
      -command "::amsn::chatUser ${user_login}"
   .user_menu add command -label "[trans sendmail] \($user_login\)" \
      -command "send_mail $user_login"
   .user_menu add separator
   if {$blocked == -1} {
      .user_menu add command -label "[trans block]" -command  "block_user ${user_login}"
   } else {
      .user_menu add command -label "[trans unblock]" \
         -command  "unblock_user ${user_login}"
   }

      ::groups::updateMenu menu .move_group_menu ::groups::menuCmdMove $user_login
      ::groups::updateMenu menu .copy_group_menu ::groups::menuCmdCopy $user_login


   if {$config(orderbygroup)} {
      .user_menu add command -label "[trans movetogroup]..." -command "tk_popup .move_group_menu $x $y"
   } else {
       .user_menu add command -label "[trans movetogroup]..." -command "tk_popup .move_group_menu $x $y" -state disabled
   }
   .user_menu add command -label "[trans delete]" -command "delete_user ${user_login}"
   .user_menu add command -label "[trans properties]" \
      -command "::abookGui::showEntry $user_login"

# Display Alarm Config settings
   .user_menu add separator
   .user_menu add command -label "[trans cfgalarm]" -command "alarm_cfg ${user_login}"

   tk_popup .user_menu $x $y
}
#///////////////////////////////////////////////////////////////////////




#///////////////////////////////////////////////////////////////////////
proc run_command_otherwindow { command } {
	set tmp [.otherwindow.c.email get]
	if { $tmp != "" } {
		eval $command $tmp
		destroy .otherwindow
	}
}
#///////////////////////////////////////////////////////////////////////




#///////////////////////////////////////////////////////////////////////
proc proxy_conf_ok {} {
   global config

   set p_server [string trim [.proxy_conf.c.server get]]
   set p_port   [string trim [.proxy_conf.c.port get]]
   if { ($p_server != "") && ($p_port != "") } {
       set config(proxy) [join [list $p_server $p_port] ":"]
   } else {
       set config(proxy) ""
       set config(withproxy) 0
   }
   grab release .proxy_conf
   destroy .proxy_conf
}
#///////////////////////////////////////////////////////////////////////


#///////////////////////////////////////////////////////////////////////
proc change_name_ok {} {
   global config

   set new_name [.change_name.c.name get]
   if {$new_name != ""} {
      ::MSN::changeName $config(login) $new_name
   }
   destroy .change_name
}
#///////////////////////////////////////////////////////////////////////



proc list_users_refresh {} {
   global list_fl list_users list_states

   set list_users_new [list]
   set fln [lsearch $list_states "FLN *"]

   foreach user $list_fl {
      set user_login [lindex $user 0]
      set user_name [lindex $user 1]
      set idx [lsearch $list_users "$user_login *"]
      if {$idx != -1} {
         lappend list_users_new [lindex $list_users $idx]
      } else {
         lappend list_users_new [list $user_login $user_name $fln]
      }
   }

   set list_users [lsort -decreasing -index 2 [lsort -decreasing -index 1 $list_users_new]]
   cmsn_draw_online

}

proc lists_compare {} {
   global list_fl list_al list_bl list_rl
   global newc_allow_block newc_add_to_list newc_exit
   set list_albl [lsort [concat $list_al $list_bl]]
   set list_rl [lsort $list_rl]

   foreach x $list_rl {
      if {[lsearch $list_albl "[lindex $x 0] *"] == -1} {
         status_log "$x in your RL list but not in your AL/BL list!\n" white
	 newcontact [lindex $x 0] [lindex $x 1]
         tkwait window .newc 
         if {$newc_exit == "OK"} {
	    if {$newc_allow_block == "allow"} {
	       ::MSN::WriteNS "ADD" "AL [lindex $x 0] [urlencode [lindex $x 1]]"
	    } else {
	       ::MSN::WriteNS "ADD" "BL [lindex $x 0] [urlencode [lindex $x 1]]"
	    }
	    if {$newc_add_to_list} {
	       ::MSN::addUser [lindex $x 0] [urlencode [lindex $x 1]]
	    }
	 } else {;# if clicked on OK, by default Accept List	  
#	       ::MSN::WriteNS "ADD" "AL [lindex $x 0] [urlencode [lindex $x 1]]"
	 }

      } ;# NOT in AL/BL
   }
}

proc cmsn_listupdate {recv} {
   global list_fl list_al list_bl list_rl

   set list_name "list_[string tolower [lindex $recv 2]]"

   if {([lindex $recv 4] <= 1) && ([lindex $recv 0] == "LST")} {
      set $list_name [list]
      status_log "clearing $list_name\n"
       if {$list_name == "list_al"} { # Here we have the groups already
	   ::groups::Enable
       }
   }
   
   if {[lindex $recv 0] == "ADD"} {		;# FIX: guess I should really
      set recv [linsert $recv 4 "1" "1"]	;# get it out of here!!
   }

   if {[lindex $recv 4] != 0} {
      set contact_info ""
      set user [lindex $recv 6]
      lappend contact_info $user
      lappend contact_info [urldecode [lindex $recv 7]]
      lappend $list_name $contact_info
      #status_log "adding to $list_name $contact_info\n"
   }

   if {[lindex $recv 4] == [lindex $recv 5]} {
      lists_compare		;# FIX: hmm, maybe I should not run it always!
      list_users_refresh
   }
}


###############################################################
create_dir $HOME
create_dir $HOME/plugins
create_dir $log_dir
create_dir $files_dir

sb set ns name ns
sb set ns sock ""
sb set ns data [list]
sb set ns serv [split $config(start_ns_server) ":"]
sb set ns stat "d"

set config(language) en
load_lang

load_config
scan_languages
load_lang

set family [lindex $config(basefont) 0]
set size [lindex $config(basefont) 1]

::themes::Init
degt_Init
::amsn::initLook $family $size $config(backgroundcolor)


if { $config(encoding) != "auto" } {
  set_encoding $config(encoding)
}

cmsn_draw_main

set idletime 0

bind all <KeyPress> "anti_idle"
bind all <ButtonPress> "anti_idle"

incr_idle

degt_protocol_win
degt_ns_command_win

after 500 proc_ns
after 750 proc_sb

if {$version != $config(last_client_version)} {
   cmsn_draw_about
  
}

init_dock

if { $config(autoconnect) == 1 } {
  ::MSN::connect $config(login) password
}

