#!/usr/bin/wish
###
###
################################################################
###                                              ###############
###        Alvaro's Messenger - amsn             ###############
###                                              ###############
###       http://amsn.sourceforge.net            ###############
###     amsn-users@lists.sourceforge.net         ###############
###                                              ###############
################################################################
### airadier at users.sourceforge.net (airadier) ###############
### Universidad de Zaragoza                      ###############
### http://aim.homelinux.com                     ###############
################################################################
### grimaldo@panama.iaehv.nl (LordOfScripts)     ###############
### http://www.coralys.com/linux/                ###############
################################################################
### Original ccmsn                               ###############
### http://msn.CompuCreations.com/               ###############
### Dave Mifsud <dave at CompuCreations dot com> ###############
################################################################
###
###
### This program is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation; version 2 of the License
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program; if not, write to the Free Software
### Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
###
###

############################################################
### Some global variables
############################################################
set version "0.80"
set date "20/5/2003"
set weburl "http://amsn.sourceforge.net"
set program_dir ""
set HOME ""
set files_dir ""


#=======================================================================


############################################################
### Look if we are launched from a link
### and set the correct working dir
############################################################

if {[catch {file readlink [info script]} res]!=0} {

   #Error in readlink, so it's not a symbolic link
   set program_dir [file dirname [info script]]

} else {

   #Recursively update $resdir until it's not a link
   set program_dir [file dirname $res]

   while {[catch {file readlink $res} res2]==0} {
      set res $res2

      #Update $program_dir, depending on absolute or relative path
      if { [string range $res2 0 0]=="/" } {
         set program_dir [file dirname $res2]
      } else {
         set program_dir [file join $resdir [file dirname $res2]]
      }

   }
}


############################################################
### And setup where to find optional packages
############################################################

lappend auto_path "[file join $program_dir plugins]"
lappend auto_path "[file join ${HOME} plugins]"


############################################################
### Configure images and sounds folder
############################################################

set images_folder "[file join $program_dir i]"
set sounds_folder "[file join $program_dir s]"


############################################################
### Setup other important directory paths
### depending on the platform
############################################################

if {$tcl_platform(platform) == "unix"} {
   set HOME "[file join $env(HOME) .amsn]"
   set files_dir "[file join $env(HOME) amsn_received]"
} elseif {$tcl_platform(platform) == "windows"} {
  if {[info exists env(USERPROFILE)]} {
     set HOME "[file join $env(USERPROFILE) amsn]"
     set files_dir "[file join $env(USERPROFILE) amsn_received]"
  } else {
   set HOME "[file join ${program_dir} amsn_config]"
   set files_dir "[file join ${program_dir} amsn_received]"
  }
} else {
   set HOME "[file join ${program_dir} amsn_config]"
   set files_dir "[file join ${program_dir} amsn_received]"
}


#TODO: Move this from here ??
#///////////////////////////////////////////////////////////////////////
#Notebook Pages (Buddies,News,Calendar,etc.)
set pgBuddy ""
set pgNews  ""
#///////////////////////////////////////////////////////////////////////



############################################################
#### Load program modules
############################################################
source [file join $program_dir ctthemes.tcl]
source [file join $program_dir notebook.tcl]	;# Notebook Megawidget
#source [file join $program_dir notebook1.tcl]	;# Notebook Megawidget
source [file join $program_dir rnotebook.tcl]	;# Notebook Megawidget
source [file join $program_dir progressbar.tcl]	;# Progressbar Megawidget
source [file join $program_dir dkffont.tcl]	;# Font selection megawidget
source [file join $program_dir migmd5.tcl]
source [file join $program_dir config.tcl]
source [file join $program_dir proxy.tcl]
source [file join $program_dir protocol.tcl]
source [file join $program_dir ctadverts.tcl]
source [file join $program_dir lang.tcl]
source [file join $program_dir ctdegt.tcl]
source [file join $program_dir hotmail.tcl]
source [file join $program_dir checkver.tcl]
source [file join $program_dir smileys.tcl]
source [file join $program_dir groups.tcl]	;# Handle buddy groups
source [file join $program_dir abook.tcl]	;# Handle buddy address book
source [file join $program_dir anigif.tcl]	;# Animated GIFS
source [file join $program_dir gui.tcl]
source [file join $program_dir alarm.tcl]	;# Alarms code (Burger)
source [file join $program_dir dock.tcl]	;# Docking routines
source [file join $program_dir trayicon.tcl]	;# Docking routines for freedesktop system tray compliant docks
source [file join $program_dir loging.tcl]	;# Euh yeh it's for loging :P
source [file join $program_dir combobox.tcl]	;# The all mighty combobox is here! (B. Oakley)
source [file join $program_dir blocking.tcl]    ;# The blocking users feature



###TODO: Replace all this msg_box calls with ::amsn::infoMsg
proc msg_box {msg} {
   ::amsn::infoMsg "$msg"
}


############################################################
### Extra procedures that go nowhere else
############################################################


#///////////////////////////////////////////////////////////////////////
# launch_browser(url)
# Launches the configured file manager
proc launch_browser { url } {

	global config tcl_platform

	if { $tcl_platform(platform) == "windows" } {

		regsub -all -nocase {htm} $url {ht%6D} url
    		exec rundll32 url.dll,FileProtocolHandler $url &

  	} else {

		eval exec $config(browser) $url &

	}

}
#///////////////////////////////////////////////////////////////////////


#///////////////////////////////////////////////////////////////////////
# launch_filemanager(directory)
# Launches the configured file manager
proc launch_filemanager {location} {
  global config

  set fileman $config(filemanager)

  if { [string length $fileman] < 1 } {
    msg_box "[trans checkfilman $location]"
  } else {
    lappend fileman $location
    eval exec [lindex $fileman 0] [lrange $fileman 1 end] &
  }

}
#///////////////////////////////////////////////////////////////////////

#///////////////////////////////////////////////////////////////////////
# launch_mailer(directory)
# Launches the configured mailer program
proc launch_mailer {user_login} {
  global config password

  set mail_param $user_login ;#By default, just the address
  if {[string first "balsa" $config(mailcommand)] != -1} {
      set mail_param "--compose=$user_login"
  } elseif {[string first "mozilla" $config(mailcommand)] != -1} {
      set mail_param "-compose mailto:$user_login"
  } elseif {[string first "evolution" $config(mailcommand)] != -1} {
      set mail_param "mailto:$user_login"
  } elseif {[string first "sylpheed" $config(mailcommand)] != -1} {
      set mail_param "--compose $user_login"
  } elseif {[string length $config(mailcommand)]==0} {
     ::hotmail::composeMail $user_login $config(login) $password
     return 0
  }

  eval exec $config(mailcommand) $mail_param &
  return 0
}
#///////////////////////////////////////////////////////////////////////

#///////////////////////////////////////////////////////////////////////
# create_dir(path)
# Creates a directory
proc create_dir {path} {
   global tcl_platform

   if {[file isdirectory $path] == 0} {
      if { [catch {file mkdir $path} res]} {
         return -1
      }
      if {$tcl_platform(platform) == "unix"} {
         file attributes $path -permissions 00700
      }
      return 0
   } else {
      return 1
   }
}
#///////////////////////////////////////////////////////////////////////


#///////////////////////////////////////////////////////////////////////
# toggle_status()
# Enabled/disables status window (for debugging purposes)
proc toggle_status {} {

   if {"[wm state .status]" == "normal"} {
      wm state .status withdrawn
      set status_show 0
   } else {
      wm state .status normal
      set status_show 1
   }
}
#///////////////////////////////////////////////////////////////////////


#///////////////////////////////////////////////////////////////////////
# timestamp()
# Returns a timestamp like [HH:MM:SS]
proc timestamp {} {
   set stamp [clock format [clock seconds] -format %H:%M:%S]
   return "\[$stamp\]"
}
#///////////////////////////////////////////////////////////////////////


#///////////////////////////////////////////////////////////////////////////////
# status_log (text,[color])
# Logs the given text with a timestamp using the given color
# to the status window
proc status_log {txt {colour ""}} {

   .status.info insert end "[timestamp] $txt" $colour
   .status.info yview moveto 1.0
}
#///////////////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
#TODO: Improve menu enabling and disabling using short names, not long
#      and translated ones
# configureMenuEntry .main_menu.file "[trans addcontact]" disabled|normal
proc configureMenuEntry {m e s} {
    $m entryconfigure $e -state $s
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
# close_cleanup()
# Makes some cleanup and config save before closing
proc close_cleanup {} {
  global HOME config lockSock
  set config(wingeometry) [wm geometry .]
  set config(showonline)  [::groups::IsExpanded online]
  set config(showoffline) [::groups::IsExpanded offline]

  save_config
  save_alarms   ;# Save alarm settings

  LoadLoginList 1
  # Unlock current profile
  LoginList changelock 0 $config(login) 0
  if { [info exists lockSock] } {
  	if { $lockSock != 0 } {
		close $lockSock
	}
  }
  SaveLoginList

  close_dock    ;# Close down the dock socket
  catch {file delete [file join $HOME hotlog.htm]} res
  catch {file delete [file join $HOME lock]} res
}
#///////////////////////////////////////////////////////////////////////



set idletime 0
set oldmousepos [list]
set autostatuschange 0
#///////////////////////////////////////////////////////////////////////
# idleCheck()
# Check idle every five seconds and reset idle if the mouse has moved
proc idleCheck {} {
   global idletime config oldmousepos trigger autostatuschange

   set mousepos [winfo pointerxy .]
   if { $mousepos != $oldmousepos } {
      set oldmousepos $mousepos
      set idletime 0
   }

   # TODO: According to preferences, this is always true
   if { $config(awaytime) >= $config(idletime) } {
   	set first [expr $config(awaytime) * 60]
	set firstvar "autoaway"
	set firststate "AWY"
	set second [expr $config(idletime) * 60]
	set secondvar "autoidle"
	set secondstate "IDL"
   } else {
   	set second [expr $config(awaytime) * 60]
	set secondvar "autoaway"
	set secondstate "AWY"
	set first [expr $config(idletime) * 60]
	set firstvar "autoidle"
	set firststate "IDL"
   }

   if { $idletime >= $first && [::MSN::myStatusIs] == "IDL" && $config(autoaway) == 1 && $autostatuschange == 1} {
   	#We change to Away if time has passed, and if IDL was set automatically
	::MSN::changeStatus AWY
   	set autostatuschange 1
   } elseif {$idletime >= $second && [::MSN::myStatusIs] == "NLN" && $config(autoidle) == 1} {
   	#We change to idle if time has passed and we're online
	::MSN::changeStatus IDL
	set autostatuschange 1
   } elseif { $idletime == 0 && $autostatuschange == 1} {
   	#We change to only if mouse movement, and status change was automatic
	::MSN::changeStatus NLN
	#Status change always resets automatic change to 0
   }

   set idletime [expr {$idletime + 5}]
   after 5000 idleCheck
}
#///////////////////////////////////////////////////////////////////////


#///////////////////////////////////////////////////////////////////////
proc choose_theme { } {
    global config
    setColor . . background {-background -highlightbackground}
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc setColor {w button name options} {
    global config

    grab $w
    set initialColor [$button cget -$name]
    set color [tk_chooseColor -title "[trans choosebackgroundcolor]" -parent $w \
	-initialcolor $initialColor]
    if { $color != "" } {
        set config(backgroundcolor) $color
	::themes::ApplyDeep $w $options $color
    }
    grab release $w
}
#///////////////////////////////////////////////////////////////////////





#///////////////////////////////////////////////////////////////////////
proc menuCmdMove {newgid {paramlist ""}} {
    set passport [lindex $paramlist 0]
    set currgid  [::abook::getGroup $passport -id]
    puts "menuCmdMove $passport from $currgid to $newgid"
}
#///////////////////////////////////////////////////////////////////////



#///////////////////////////////////////////////////////////////////////
proc show_umenu {user_login x y} {
   global list_bl config alarms

   set blocked [::MSN::userIsBlocked $user_login]
   .user_menu delete 0 end
   .user_menu add command -label "${user_login}" \
      -command "clipboard clear;clipboard append \"${user_login}\""

   .user_menu add separator   
   .user_menu add command -label "[trans sendmsg]" \
      -command "::amsn::chatUser ${user_login}"
   .user_menu add command -label "[trans sendmail]" \
      -command "launch_mailer $user_login"
   .user_menu add command -label "[trans viewprofile]" \
      -command "::hotmail::viewProfile ${user_login}"
   .user_menu add command -label "[trans history]" \
      -command "::log::OpenLogWin ${user_login}"	
   .user_menu add separator
   if {$blocked == 0} {
      .user_menu add command -label "[trans block]" -command  "::amsn::blockUser ${user_login}"
   } else {
      .user_menu add command -label "[trans unblock]" \
         -command  "::amsn::unblockUser ${user_login}"
   }

      ::groups::updateMenu menu .move_group_menu ::groups::menuCmdMove $user_login
      ::groups::updateMenu menu .copy_group_menu ::groups::menuCmdCopy $user_login


   if {$config(orderbygroup)} {
      .user_menu add command -label "[trans movetogroup]..." -command "tk_popup .move_group_menu $x $y"
   } else {
       .user_menu add command -label "[trans movetogroup]..." -command "tk_popup .move_group_menu $x $y" -state disabled
   }
   .user_menu add command -label "[trans delete]" -command "::amsn::deleteUser ${user_login}"
   .user_menu add command -label "[trans properties]" \
      -command "::abookGui::showEntry $user_login"

# Display Alarm Config settings
   .user_menu add separator
   .user_menu add command -label "[trans cfgalarm]" -command "alarm_cfg ${user_login}"

   tk_popup .user_menu $x $y
}
#///////////////////////////////////////////////////////////////////////




#///////////////////////////////////////////////////////////////////////
proc run_command_otherwindow { command } {
	set tmp [.otherwindow.c.email get]
	if { $tmp != "" } {
		eval $command $tmp
		destroy .otherwindow
	}
}
#///////////////////////////////////////////////////////////////////////




#///////////////////////////////////////////////////////////////////////
proc proxy_conf_ok {} {
   global config

   set p_server [string trim [.proxy_conf.c.server get]]
   set p_port   [string trim [.proxy_conf.c.port get]]
   if { ($p_server != "") && ($p_port != "") } {
       set config(proxy) [join [list $p_server $p_port] ":"]
   } else {
       set config(proxy) ""
       set config(withproxy) 0
   }
   grab release .proxy_conf
   destroy .proxy_conf
}
#///////////////////////////////////////////////////////////////////////


#///////////////////////////////////////////////////////////////////////
# stringmap(substlist,string) returns string
# A try to replace "string map" function
proc stringmap { substitution str } {



	return [string map $substitution $str]

	set newstr $str

	set pos [expr {[string first [lindex $substitution 0] $newstr] -1}]

	while { $pos > -1 } {
		set end [expr {$pos + [string length [lindex $substitution 0]]}]
		set newstr "[string range $newstr 0 $pos] [lindex $substitution 1][string range $newstr [expr {$end+1}] end]"
		set pos [expr {[string first [lindex $substitution 0] $newstr] -1}]
	}


	return $newstr
}
#///////////////////////////////////////////////////////////////////////

###############################################################
create_dir $HOME
create_dir $HOME/plugins
#create_dir $log_dir
create_dir $files_dir
ConfigDefaults

set config(language) en  ;#Load english as default language to fill trans array
load_lang

;# Load of logins/profiles in combobox
;# Also sets the newest login as config(login)
;# and modifies HOME with the newest user
if { [LoadLoginList]==-1 } {
   exit
}

#create_dir $HOME
set log_dir "[file join ${HOME} logs]"
#create_dir $log_dir

load_config		;# So this loads the config of this newest dude
scan_languages
load_lang

sb set ns name ns
sb set ns sock ""
sb set ns data [list]
sb set ns serv [split $config(start_ns_server) ":"]
sb set ns stat "d"

set family [lindex $config(basefont) 0]
set size [lindex $config(basefont) 1]

::themes::Init
degt_Init
::amsn::initLook $family $size $config(backgroundcolor)


if { $config(encoding) != "auto" } {
  set_encoding $config(encoding)
}

if { $config(receiveddir) != "" } {
   set res [create_dir $config(receiveddir)]
   if { $res >= 0} {
      set files_dir $config(receiveddir)
   }
}

cmsn_draw_main

bind all <KeyPress> "set idletime 0"

idleCheck

degt_protocol_win
degt_ns_command_win

after 500 proc_ns
after 750 proc_sb

if {$version != $config(last_client_version)} {
   ::amsn::aboutWindow

}

if { $config(autoconnect) == 1 } {
  ::MSN::connect $config(login) password
}

init_dock
