
images {
  image: "login_screen/login_bg.png" COMP;
  image: "login_screen/amsn.png" COMP;
  image: "login_screen/language_icon.png" COMP;
  image: "login_screen/arrow.png" COMP;
  image: "login_screen/dp_border.png" COMP;
#include "login_screen/logo_anim_images.edc"
}


group {
  name: "login_screen";


  script {
    public animate_arrow = 1;
    public remove_button = 0;
    public cube_animated = 0;

    public language_shown = 1;
    public dp_shown = 1;
    public options_shown = 1;
    public signin_shown = 1;
    public links_shown = 1;
    public update_shown = 1;
    public more_shown = 0;

    public language_h = 0;
    public dp_h = 0;
    public fields_h = 0;
    public options_h = 0;
    public signin_h = 0;
    public links_h = 0;
    public update_h = 0;
    public more_h = 0;
    
    public change_state_all(state[], num) {
      set_state(PART:"language_frame", state, num);
      set_state(PART:"dp_frame", state, num);
      /*
      set_state(PART:"language_button", state, num);
      set_state(PART:"language_spacer", state, num);
      set_state(PART:"language_text", state, num);
      set_state(PART:"main_frame", state, num);
      set_state(PART:"login_screen.username", state, num);
      set_state(PART:"login_screen.username_label", state, num);
      set_state(PART:"login_screen.password", state, num);
      set_state(PART:"login_screen.password_label", state, num);
      set_state(PART:"login_screen.status", state, num);
      set_state(PART:"login_screen.status_label", state, num);
      set_state(PART:"arrow", state, num);
      set_state(PART:"login_button", state, num);
      set_state(PART:"login_button_label", state, num);
      set_state(PART:"more_button", state, num);
      set_state(PART:"connection_status", state, num);
      set_state(PART:"connection_status2", state, num);*/
    }
  }

  parts {
    part {
      name: "background";
      type: RECT;
      mouse_events: 0;
      description {
        state: "default" 0.0;
        color: 255 255 255 255;
        rel1 {
          relative: 0.0 0.0;
          offset: 0 0;
        }
        rel2 {
          relative: 1.0 1.0;
          offset: 0 0;
        }
      }
    }
    part {
      name: "background_spectrum";
      type: GRADIENT;
      mouse_events: 0;
      description {
        state: "default" 0.0;
        rel1 {
          relative: 0.0 0.0;
          offset: 0 0;
        }
        rel2 {
          relative: 1.0 1.0;
          offset: 0 0;
        }
	gradient {
	  spectrum: "login_screen_spectrum";
	  type: "radial";
          rel1 {
            relative: 0.0 0.0;
            offset: 0 0;
          }
          rel2 {
            relative: 1.0 1.0;
            offset: 0 0;
          }
	}
	fill {

	  origin {
	    relative: 0.0 0.0;
	  }
	}
      }
    }

    part {
      name: "background_image";
      type: IMAGE;
      mouse_events: 0;
      description {
        state: "default" 0.0;
        min: 40 30;
        rel1 {
          relative: 1.0 1.0;
          offset: -60 -280;
        }
        rel2 {
          relative: 1.0 1.0;
          offset: 0 0;
        }
        image {
          normal: "login_screen/login_bg.png";
          border: 0 0 0 0;
        }
      }
    }

#define CREATE_FRAME(NAME, UNDER, HEIGHT)     \
    part {				      \
      name, NAME;			      \
      type, RECT;			      \
      description {			      \
	state, "default" 0.0;		      \
	color, 255 255 255 255;		      \
	rel1 {				      \
	  to, UNDER;			      \
	  relative, 0.0 1.0;		      \
	  offset, 0 0;			      \
	}				      \
	rel2 {				      \
	  to, UNDER;			      \
	  relative, 1.0 1.0;		      \
	  offset, -1 (HEIGHT-1);	      \
	}				      \
      }					      \
      description {			      \
	state, "hidden" 0.0;		      \
	inherit, "default" 0.0;		      \
	visible, 0;			      \
	color, 255 255 255 0;		      \
	rel1 {				      \
	  to, UNDER;			      \
	  relative, 0.0 1.0;		      \
	  offset, 0 0;			      \
	}				      \
	rel2 {				      \
	  to, UNDER;			      \
	  relative, 1.0 1.0;		      \
	  offset, -1 -1;		      \
	}				      \
      }					      \
    }

#include "login_screen/language_frame.edc"
#include "login_screen/dp_frame.edc"
#include "login_screen/fields_frame.edc"
#include "login_screen/options_frame.edc"
#include "login_screen/signin_frame.edc"
#include "login_screen/links_frame.edc"
#include "login_screen/update_frame.edc"
#include "login_screen/more_frame.edc"
#include "login_screen/logo_anim_part.edc"
    part {
      name: "connection_status";
      type: TEXT;
      mouse_events: 0;
      description {
        state: "default" 0.0;
        visible: 0;
	rel1 {
	  to_y: "logo_cube";
	  relative: 0.0 1.0;
	  offset: 0 10;
	}
	rel2 {
	  to_y: "logo_cube";
	  relative: 1.0 1.0;
	  offset: 0 30;
	}
        color: 0 0 0 255;
        color2: 225 225 225 128;
	text {
	  align: 0.5 0.5;
	  font: "VeraBd";
	  size: 10;
	  text: "Connecting";
	  min: 0 0;
	  elipsis: 0.0;
	}

      }
      description {
        state: "connecting" 0.0;
        inherit: "default" 0.0;
        visible: 1;
      } 
    } 
    part {
      name: "connection_status2";
      type: TEXT;
      mouse_events: 0;
      description {
        state: "default" 0.0;
        visible: 0;
	rel1 {
	  to_y: "logo_cube";
	  relative: 0.0 1.0;
	  offset: 0 30;
	}
	rel2 {
	  to_y: "logo_cube";
	  relative: 1.0 1.0;
	  offset: 0 50;
	}
        color: 0 0 0 255;
        color2: 225 225 225 128;
	text {
	  align: 0.5 0.5;
	  font: "VeraBd";
	  size: 10;
	  text: "";
	  min: 0 0;
	  elipsis: 0.0;
	}

      }
      description {
        state: "connecting" 0.0;
        inherit: "default" 0.0;
        visible: 1;
      } 
    }
  }
  programs {
    program {
      name: "arrow_animate";
      signal: "load";
      script {
	set_int(animate_arrow, 1);
      }
      after: "arrow_left";
    }
    program {
      name: "no_more";
      signal: "load";
      script {
	new x;
	new y;
	new w;
	new h;
	
	get_geometry(PART:"language_frame", x, y, w, h);
	set_int(language_h, h);
	get_geometry(PART:"dp_frame", x, y, w, h);
	set_int(dp_h, h);
	get_geometry(PART:"fields_frame", x, y, w, h);
	set_int(fields_h, h);
	get_geometry(PART:"options_frame", x, y, w, h);
	set_int(options_h, h);
	get_geometry(PART:"signin_frame", x, y, w, h);
	set_int(signin_h, h);
	get_geometry(PART:"links_frame", x, y, w, h);
	set_int(links_h, h);
	get_geometry(PART:"update_frame", x, y, w, h);
	set_int(update_h, h);
	get_geometry(PART:"more_frame", x, y, w, h);
	set_int(more_h, h);
	set_state(PART:"more_frame", "hidden", 0.0);
	
      }
    }
    program {
      name: "arrow_unanimate";
      script {
	set_int(animate_arrow, 0);
      }
    }
    program {
      name: "arrow_left";
      action: STATE_SET "left" 0.0;
      target: "arrow";
      transition: LINEAR 0.3;
      after: "arrow_right";
    }
    program {
      name: "arrow_right";
      action: STATE_SET "default" 0.0;
      target: "arrow";
      transition: LINEAR 0.3;
      after: "arrow_left";
    }
    program {
      name: "connecting";
      signal: "connecting";
      script {
	new num;
	set_float(num, 0.0);

	run_program(PROGRAM:"arrow_unanimate");
	set_int(remove_button, 1);
	change_state_all("connecting", num);
      }
      after: "check_cube_anim_start";
    }
    program {
      name: "check_cube_anim_start";
      script {
	if (get_int(cube_animated) == 0) {
	  run_program(PROGRAM:"cube_anim_start");
	}
	set_int(cube_animated, 1);
      }
    }
    program {
      name, "see_more";
      source, "more_button";
      signal, "mouse,clicked,1";
      script {
	
      }
    }
#define SHOW_HIDE_FRAME_PROGRAMS(FRAME, VAR)	\
    program {					\
      name, "hide_"FRAME;			\
      script {					\
	set_int(VAR, 0);			\
      }						\
      after, "hide_"FRAME"_animation";		\
    }						\
    program {					\
      name, "show_"FRAME;			\
      script {					\
	set_int(VAR, 1);			\
      }						\
      after, "show_"FRAME"_animation";		\
    }						\
    program {					\
      name, "show_"FRAME"_animation";		\
      action, STATE_SET "default" 0.0;		\
      target, FRAME;				\
      transition, ACCELERATE 0.5;		\
    }						\
    program {					\
      name, "hide_"FRAME"_animation";		\
      action, STATE_SET "hidden" 0.0;		\
      target, FRAME;				\
      transition, ACCELERATE 0.5;		\
    }						\

    SHOW_HIDE_FRAME_PROGRAMS("language_frame", language_shown);
    SHOW_HIDE_FRAME_PROGRAMS("dp_frame", dp_shown);
    SHOW_HIDE_FRAME_PROGRAMS("options_frame", options_shown);
    SHOW_HIDE_FRAME_PROGRAMS("signin_frame", signin_shown);
    SHOW_HIDE_FRAME_PROGRAMS("links_frame", links_shown);
    SHOW_HIDE_FRAME_PROGRAMS("update_frame", update_shown);
    SHOW_HIDE_FRAME_PROGRAMS("more_frame", more_shown);

#define SHOW(FRAME, HEIGHT)			\
    run_program(PROGRAM:"show_"FRAME);		\
    total_h += get_int(HEIGHT);			\

#define HIDE(FRAME, HEIGHT)			\
    run_program(PROGRAM:"hide_"FRAME);		\
    total_h -= get_int(HEIGHT);			\

#define CHECK_AND_SHOW(FRAME, VAR, HEIGHT)	\
    if (get_int(VAR) == 0) {			\
      SHOW(FRAME, HEIGHT)			\
    }

#define CHECK_AND_HIDE(FRAME, VAR, HEIGHT)	\
    if (get_int(VAR) == 1) {			\
      HIDE(FRAME, HEIGHT)			\
    }

    program {
      name: "resizing";
      signal: "resize";
      script {
	new x;
	new y;
	new w;
	new win_h;
	new total_h;

	/* We handle the login screen frames only if the cube is not yet shown */
	if (get_int(cube_animated) == 0) {
	  get_geometry(PART:"background", x, y, w, win_h);

	  total_h = get_int(fields_h);
	  if (get_int(signin_shown) == 1) {
	    total_h += get_int(signin_h);
	    if (total_h + get_int(more_h) > win_h) {
	      HIDE("signin_frame", signin_h)
	      CHECK_AND_HIDE("options_frame", options_shown, options_h)
	      CHECK_AND_HIDE("dp_frame", dp_shown, dp_h)
	      CHECK_AND_HIDE("language_frame", language_shown, language_h)
	      CHECK_AND_HIDE("update_frame", update_shown, update_h)
	      CHECK_AND_HIDE("links_frame", links_shown, links_h)
	      CHECK_AND_SHOW("more_frame", more_shown, more_h)
	      return;
	    }
	  } else {
	    if (total_h + get_int(signin_h) + get_int(more_h) < win_h) {
	      SHOW("signin_frame", signin_h)
	    } else {
	      return;
	    }
	  }

	  if (get_int(options_shown) == 1) {
	    total_h += get_int(options_h);
	    if (total_h + get_int(more_h) > win_h) {
	      HIDE("options_frame", options_h)
	      CHECK_AND_HIDE("dp_frame", dp_shown, dp_h)
	      CHECK_AND_HIDE("language_frame", language_shown, language_h)
	      CHECK_AND_HIDE("update_frame", update_shown, update_h)
	      CHECK_AND_HIDE("links_frame", links_shown, links_h)
	      CHECK_AND_SHOW("more_frame", more_shown, more_h)
	      return;
	    } 
	  } else {
	    if (total_h + get_int(options_h) + get_int(more_h) < win_h) {
	      SHOW("options_frame", options_h)
	    } else {
	      return;
	    }
	  }



	  if (get_int(dp_shown) == 1) {
	    total_h += get_int(dp_h);
	    if (total_h + get_int(more_h) > win_h) {
	      HIDE("dp_frame", dp_h)
	      CHECK_AND_HIDE("language_frame", language_shown, language_h)
	      CHECK_AND_HIDE("update_frame", update_shown, update_h)
	      CHECK_AND_HIDE("links_frame", links_shown, links_h)
	      CHECK_AND_SHOW("more_frame", more_shown, more_h)
	      return;
	    } 
	  } else {
	    if (total_h + get_int(dp_h) + get_int(more_h) < win_h) {
	      SHOW("dp_frame", dp_h)
	    } else {
	      return;
	    }
	  }

	  if (get_int(language_shown) == 1) {
	    total_h += get_int(language_h);
	    if (total_h + get_int(more_h) > win_h) {
	      HIDE("language_frame", language_h)
	      CHECK_AND_HIDE("update_frame", update_shown, update_h)
	      CHECK_AND_HIDE("links_frame", links_shown, links_h)
	      CHECK_AND_SHOW("more_frame", more_shown, more_h)
	      return;
	    } 
	  } else {
	    if (total_h + get_int(language_h) + get_int(more_h) < win_h) {
	      SHOW("language_frame", language_h)
	    } else {
	      return;
	    }
	  }

	  if (get_int(update_shown) == 1) {
	    total_h += get_int(update_h);
	    if (total_h + get_int(more_h) > win_h) {
	      HIDE("update_frame", update_h)
	      CHECK_AND_HIDE("links_frame", links_shown, links_h)
	      CHECK_AND_SHOW("more_frame", more_shown, more_h)
	      return;
	    } 
	  } else {
	    if (total_h + get_int(update_h) + get_int(more_h) < win_h) {
	      SHOW("update_frame", update_h)
	    } else {
	      return;
	    }
	  }


	  if (get_int(links_shown) == 1) {
	    total_h += get_int(links_h);
	    if (total_h > win_h) {
	      HIDE("links_frame", links_h)
	      CHECK_AND_SHOW("more_frame", more_shown, more_h)
	      return;
	    } 
	  } else {
	    if (total_h + get_int(links_h) < win_h) {
	      SHOW("links_frame", links_h)
	      CHECK_AND_HIDE("more_frame", more_shown, more_h)
	    } else {
	      return;
	    }
	  }

	}
      }
    }
#include "login_screen/logo_anim_programs.edc"
  }
}
